{
  "features": [
    {
      "name": "regex-ast-locator",
      "description": "Find AST nodes by text content instead of complex TSQuery patterns",
      "why": "Makes targeting for refactoring operations 10x simpler for AI agents",
      "score": 4,
      "status": "proposed",
      "tier": 1
    },
    {
      "name": "selection-tool",
      "description": "Select code ranges by specifying start/end boundaries using TSQuery selectors or regex patterns",
      "why": "Enables extract-method, comment-region, and other range operations by allowing precise boundary specification",
      "score": 2,
      "status": "proposed",
      "tier": 1,
      "dependencies": [
        "regex-ast-locator"
      ]
    },
    {
      "name": "function-body-extractor",
      "description": "Get just the body of a function without reading entire files",
      "why": "Massive performance improvement for AI agents analyzing code",
      "score": 1,
      "status": "proposed",
      "tier": 1,
      "dependencies": [
        "regex-ast-locator"
      ]
    },
    {
      "name": "smart-method-extraction",
      "description": "Extract methods with automatic parameter/return detection",
      "why": "Most common refactoring operation needs automation",
      "score": 3,
      "status": "proposed",
      "tier": 2,
      "dependencies": [
        "selection-tool"
      ]
    },
    {
      "name": "automated-dead-code-elimination",
      "description": "Safe removal of unused code with impact analysis",
      "why": "Quality maintenance automation - removes manual analysis",
      "score": 0,
      "status": "proposed",
      "tier": 2
    },
    {
      "name": "optimize-abstraction-leakage-report",
      "description": "Identify highly connected clusters in change frequency graph instead of reporting all pairs",
      "why": "The abstraction leakage report can get huge due to the large amount of possible pairs. This could be improved by identifying highly connected clusters in the graph and reporting on them once.",
      "score": 1,
      "status": "proposed",
      "tier": 4
    },
    {
      "name": "extract-module-from-class",
      "description": "Extract cohesive methods from large classes into separate modules",
      "why": "Would have automated the manual work of splitting roadmap-manager.ts into focused modules",
      "score": 0,
      "status": "proposed",
      "tier": 4
    },
    {
      "name": "auto-import-organizer",
      "description": "Automatically add, remove, and organize import statements when moving code between files",
      "why": "During modular refactoring, managing imports manually was tedious and error-prone",
      "score": 0,
      "status": "proposed",
      "tier": 4
    },
    {
      "name": "validate-test-architecture-consistency",
      "description": "Quality check to ensure locator commands use YAML tests and refactoring commands use TS tests",
      "why": "Would have caught the architecture mistake where node-finding tests were placed in wrong directory with wrong format",
      "score": 0,
      "status": "proposed",
      "tier": 4
    },
    {
      "name": "automated-command-type-validation",
      "description": "Quality check to verify commands are correctly categorized as locators vs refactorings vs transformations",
      "why": "Would help maintain testing consistency and prevent mixing command types in wrong frameworks",
      "score": 0,
      "status": "proposed",
      "tier": 4
    },
    {
      "name": "roadmap-tagging-system",
      "description": "Add tags to roadmap items to categorize as: command, quality-check, infrastructure, tool, etc.",
      "why": "Would help organize roadmap features by type and make it clearer what kind of contribution each item represents",
      "score": 0,
      "status": "proposed",
      "tier": 4
    }
  ],
  "lastUpdated": "2025-07-02T20:40:32.886Z"
}